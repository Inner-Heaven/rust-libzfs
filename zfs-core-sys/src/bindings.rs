/* automatically generated by rust-bindgen 0.55.1 */

pub const ZPOOL_ROOTFS_PROPS: &'static [u8; 15usize] = b"root-props-nvl\0";
pub const ZPOOL_NO_REWIND: u32 = 1;
pub const ZPOOL_NEVER_REWIND: u32 = 2;
pub const ZPOOL_TRY_REWIND: u32 = 4;
pub const ZPOOL_DO_REWIND: u32 = 8;
pub const ZPOOL_EXTREME_REWIND: u32 = 16;
pub const ZPOOL_REWIND_MASK: u32 = 28;
pub const ZPOOL_REWIND_POLICIES: u32 = 31;
pub const ZPOOL_CONFIG_VERSION: &'static [u8; 8usize] = b"version\0";
pub const ZPOOL_CONFIG_POOL_NAME: &'static [u8; 5usize] = b"name\0";
pub const ZPOOL_CONFIG_POOL_STATE: &'static [u8; 6usize] = b"state\0";
pub const ZPOOL_CONFIG_POOL_TXG: &'static [u8; 4usize] = b"txg\0";
pub const ZPOOL_CONFIG_POOL_GUID: &'static [u8; 10usize] = b"pool_guid\0";
pub const ZPOOL_CONFIG_CREATE_TXG: &'static [u8; 11usize] = b"create_txg\0";
pub const ZPOOL_CONFIG_TOP_GUID: &'static [u8; 9usize] = b"top_guid\0";
pub const ZPOOL_CONFIG_VDEV_TREE: &'static [u8; 10usize] = b"vdev_tree\0";
pub const ZPOOL_CONFIG_TYPE: &'static [u8; 5usize] = b"type\0";
pub const ZPOOL_CONFIG_CHILDREN: &'static [u8; 9usize] = b"children\0";
pub const ZPOOL_CONFIG_ID: &'static [u8; 3usize] = b"id\0";
pub const ZPOOL_CONFIG_GUID: &'static [u8; 5usize] = b"guid\0";
pub const ZPOOL_CONFIG_INDIRECT_OBJECT: &'static [u8; 28usize] = b"com.delphix:indirect_object\0";
pub const ZPOOL_CONFIG_INDIRECT_BIRTHS: &'static [u8; 28usize] = b"com.delphix:indirect_births\0";
pub const ZPOOL_CONFIG_PREV_INDIRECT_VDEV: &'static [u8; 31usize] =
    b"com.delphix:prev_indirect_vdev\0";
pub const ZPOOL_CONFIG_PATH: &'static [u8; 5usize] = b"path\0";
pub const ZPOOL_CONFIG_DEVID: &'static [u8; 6usize] = b"devid\0";
pub const ZPOOL_CONFIG_SPARE_ID: &'static [u8; 8usize] = b"spareid\0";
pub const ZPOOL_CONFIG_METASLAB_ARRAY: &'static [u8; 15usize] = b"metaslab_array\0";
pub const ZPOOL_CONFIG_METASLAB_SHIFT: &'static [u8; 15usize] = b"metaslab_shift\0";
pub const ZPOOL_CONFIG_ASHIFT: &'static [u8; 7usize] = b"ashift\0";
pub const ZPOOL_CONFIG_ASIZE: &'static [u8; 6usize] = b"asize\0";
pub const ZPOOL_CONFIG_DTL: &'static [u8; 4usize] = b"DTL\0";
pub const ZPOOL_CONFIG_SCAN_STATS: &'static [u8; 11usize] = b"scan_stats\0";
pub const ZPOOL_CONFIG_REMOVAL_STATS: &'static [u8; 14usize] = b"removal_stats\0";
pub const ZPOOL_CONFIG_CHECKPOINT_STATS: &'static [u8; 17usize] = b"checkpoint_stats\0";
pub const ZPOOL_CONFIG_VDEV_STATS: &'static [u8; 11usize] = b"vdev_stats\0";
pub const ZPOOL_CONFIG_INDIRECT_SIZE: &'static [u8; 14usize] = b"indirect_size\0";
pub const ZPOOL_CONFIG_VDEV_STATS_EX: &'static [u8; 14usize] = b"vdev_stats_ex\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_R_ACTIVE_QUEUE: &'static [u8; 25usize] =
    b"vdev_sync_r_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_W_ACTIVE_QUEUE: &'static [u8; 25usize] =
    b"vdev_sync_w_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_R_ACTIVE_QUEUE: &'static [u8; 26usize] =
    b"vdev_async_r_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_W_ACTIVE_QUEUE: &'static [u8; 26usize] =
    b"vdev_async_w_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_SCRUB_ACTIVE_QUEUE: &'static [u8; 30usize] =
    b"vdev_async_scrub_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_TRIM_ACTIVE_QUEUE: &'static [u8; 29usize] =
    b"vdev_async_trim_active_queue\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_R_PEND_QUEUE: &'static [u8; 23usize] = b"vdev_sync_r_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_W_PEND_QUEUE: &'static [u8; 23usize] = b"vdev_sync_w_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_R_PEND_QUEUE: &'static [u8; 24usize] =
    b"vdev_async_r_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_W_PEND_QUEUE: &'static [u8; 24usize] =
    b"vdev_async_w_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_SCRUB_PEND_QUEUE: &'static [u8; 28usize] =
    b"vdev_async_scrub_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_TRIM_PEND_QUEUE: &'static [u8; 27usize] =
    b"vdev_async_trim_pend_queue\0";
pub const ZPOOL_CONFIG_VDEV_TOT_R_LAT_HISTO: &'static [u8; 21usize] = b"vdev_tot_r_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_TOT_W_LAT_HISTO: &'static [u8; 21usize] = b"vdev_tot_w_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_DISK_R_LAT_HISTO: &'static [u8; 22usize] = b"vdev_disk_r_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_DISK_W_LAT_HISTO: &'static [u8; 22usize] = b"vdev_disk_w_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_R_LAT_HISTO: &'static [u8; 22usize] = b"vdev_sync_r_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_W_LAT_HISTO: &'static [u8; 22usize] = b"vdev_sync_w_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_R_LAT_HISTO: &'static [u8; 23usize] = b"vdev_async_r_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_W_LAT_HISTO: &'static [u8; 23usize] = b"vdev_async_w_lat_histo\0";
pub const ZPOOL_CONFIG_VDEV_SCRUB_LAT_HISTO: &'static [u8; 17usize] = b"vdev_scrub_histo\0";
pub const ZPOOL_CONFIG_VDEV_TRIM_LAT_HISTO: &'static [u8; 16usize] = b"vdev_trim_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_IND_R_HISTO: &'static [u8; 22usize] = b"vdev_sync_ind_r_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_IND_W_HISTO: &'static [u8; 22usize] = b"vdev_sync_ind_w_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_IND_R_HISTO: &'static [u8; 23usize] = b"vdev_async_ind_r_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_IND_W_HISTO: &'static [u8; 23usize] = b"vdev_async_ind_w_histo\0";
pub const ZPOOL_CONFIG_VDEV_IND_SCRUB_HISTO: &'static [u8; 21usize] = b"vdev_ind_scrub_histo\0";
pub const ZPOOL_CONFIG_VDEV_IND_TRIM_HISTO: &'static [u8; 20usize] = b"vdev_ind_trim_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_AGG_R_HISTO: &'static [u8; 22usize] = b"vdev_sync_agg_r_histo\0";
pub const ZPOOL_CONFIG_VDEV_SYNC_AGG_W_HISTO: &'static [u8; 22usize] = b"vdev_sync_agg_w_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_AGG_R_HISTO: &'static [u8; 23usize] = b"vdev_async_agg_r_histo\0";
pub const ZPOOL_CONFIG_VDEV_ASYNC_AGG_W_HISTO: &'static [u8; 23usize] = b"vdev_async_agg_w_histo\0";
pub const ZPOOL_CONFIG_VDEV_AGG_SCRUB_HISTO: &'static [u8; 21usize] = b"vdev_agg_scrub_histo\0";
pub const ZPOOL_CONFIG_VDEV_AGG_TRIM_HISTO: &'static [u8; 20usize] = b"vdev_agg_trim_histo\0";
pub const ZPOOL_CONFIG_VDEV_SLOW_IOS: &'static [u8; 14usize] = b"vdev_slow_ios\0";
pub const ZPOOL_CONFIG_VDEV_ENC_SYSFS_PATH: &'static [u8; 20usize] = b"vdev_enc_sysfs_path\0";
pub const ZPOOL_CONFIG_WHOLE_DISK: &'static [u8; 11usize] = b"whole_disk\0";
pub const ZPOOL_CONFIG_ERRCOUNT: &'static [u8; 12usize] = b"error_count\0";
pub const ZPOOL_CONFIG_NOT_PRESENT: &'static [u8; 12usize] = b"not_present\0";
pub const ZPOOL_CONFIG_SPARES: &'static [u8; 7usize] = b"spares\0";
pub const ZPOOL_CONFIG_IS_SPARE: &'static [u8; 9usize] = b"is_spare\0";
pub const ZPOOL_CONFIG_NPARITY: &'static [u8; 8usize] = b"nparity\0";
pub const ZPOOL_CONFIG_HOSTID: &'static [u8; 7usize] = b"hostid\0";
pub const ZPOOL_CONFIG_HOSTNAME: &'static [u8; 9usize] = b"hostname\0";
pub const ZPOOL_CONFIG_LOADED_TIME: &'static [u8; 18usize] = b"initial_load_time\0";
pub const ZPOOL_CONFIG_UNSPARE: &'static [u8; 8usize] = b"unspare\0";
pub const ZPOOL_CONFIG_PHYS_PATH: &'static [u8; 10usize] = b"phys_path\0";
pub const ZPOOL_CONFIG_IS_LOG: &'static [u8; 7usize] = b"is_log\0";
pub const ZPOOL_CONFIG_L2CACHE: &'static [u8; 8usize] = b"l2cache\0";
pub const ZPOOL_CONFIG_HOLE_ARRAY: &'static [u8; 11usize] = b"hole_array\0";
pub const ZPOOL_CONFIG_VDEV_CHILDREN: &'static [u8; 14usize] = b"vdev_children\0";
pub const ZPOOL_CONFIG_IS_HOLE: &'static [u8; 8usize] = b"is_hole\0";
pub const ZPOOL_CONFIG_DDT_HISTOGRAM: &'static [u8; 14usize] = b"ddt_histogram\0";
pub const ZPOOL_CONFIG_DDT_OBJ_STATS: &'static [u8; 17usize] = b"ddt_object_stats\0";
pub const ZPOOL_CONFIG_DDT_STATS: &'static [u8; 10usize] = b"ddt_stats\0";
pub const ZPOOL_CONFIG_SPLIT: &'static [u8; 9usize] = b"splitcfg\0";
pub const ZPOOL_CONFIG_ORIG_GUID: &'static [u8; 10usize] = b"orig_guid\0";
pub const ZPOOL_CONFIG_SPLIT_GUID: &'static [u8; 11usize] = b"split_guid\0";
pub const ZPOOL_CONFIG_SPLIT_LIST: &'static [u8; 10usize] = b"guid_list\0";
pub const ZPOOL_CONFIG_REMOVING: &'static [u8; 9usize] = b"removing\0";
pub const ZPOOL_CONFIG_RESILVER_TXG: &'static [u8; 13usize] = b"resilver_txg\0";
pub const ZPOOL_CONFIG_REBUILD_TXG: &'static [u8; 12usize] = b"rebuild_txg\0";
pub const ZPOOL_CONFIG_COMMENT: &'static [u8; 8usize] = b"comment\0";
pub const ZPOOL_CONFIG_SUSPENDED: &'static [u8; 10usize] = b"suspended\0";
pub const ZPOOL_CONFIG_SUSPENDED_REASON: &'static [u8; 17usize] = b"suspended_reason\0";
pub const ZPOOL_CONFIG_TIMESTAMP: &'static [u8; 10usize] = b"timestamp\0";
pub const ZPOOL_CONFIG_BOOTFS: &'static [u8; 7usize] = b"bootfs\0";
pub const ZPOOL_CONFIG_MISSING_DEVICES: &'static [u8; 14usize] = b"missing_vdevs\0";
pub const ZPOOL_CONFIG_LOAD_INFO: &'static [u8; 10usize] = b"load_info\0";
pub const ZPOOL_CONFIG_REWIND_INFO: &'static [u8; 12usize] = b"rewind_info\0";
pub const ZPOOL_CONFIG_UNSUP_FEAT: &'static [u8; 11usize] = b"unsup_feat\0";
pub const ZPOOL_CONFIG_ENABLED_FEAT: &'static [u8; 13usize] = b"enabled_feat\0";
pub const ZPOOL_CONFIG_CAN_RDONLY: &'static [u8; 11usize] = b"can_rdonly\0";
pub const ZPOOL_CONFIG_FEATURES_FOR_READ: &'static [u8; 18usize] = b"features_for_read\0";
pub const ZPOOL_CONFIG_FEATURE_STATS: &'static [u8; 14usize] = b"feature_stats\0";
pub const ZPOOL_CONFIG_ERRATA: &'static [u8; 7usize] = b"errata\0";
pub const ZPOOL_CONFIG_VDEV_TOP_ZAP: &'static [u8; 25usize] = b"com.delphix:vdev_zap_top\0";
pub const ZPOOL_CONFIG_VDEV_LEAF_ZAP: &'static [u8; 26usize] = b"com.delphix:vdev_zap_leaf\0";
pub const ZPOOL_CONFIG_HAS_PER_VDEV_ZAPS: &'static [u8; 30usize] =
    b"com.delphix:has_per_vdev_zaps\0";
pub const ZPOOL_CONFIG_RESILVER_DEFER: &'static [u8; 25usize] = b"com.datto:resilver_defer\0";
pub const ZPOOL_CONFIG_CACHEFILE: &'static [u8; 10usize] = b"cachefile\0";
pub const ZPOOL_CONFIG_MMP_STATE: &'static [u8; 10usize] = b"mmp_state\0";
pub const ZPOOL_CONFIG_MMP_TXG: &'static [u8; 8usize] = b"mmp_txg\0";
pub const ZPOOL_CONFIG_MMP_SEQ: &'static [u8; 8usize] = b"mmp_seq\0";
pub const ZPOOL_CONFIG_MMP_HOSTNAME: &'static [u8; 13usize] = b"mmp_hostname\0";
pub const ZPOOL_CONFIG_MMP_HOSTID: &'static [u8; 11usize] = b"mmp_hostid\0";
pub const ZPOOL_CONFIG_ALLOCATION_BIAS: &'static [u8; 11usize] = b"alloc_bias\0";
pub const ZPOOL_CONFIG_EXPANSION_TIME: &'static [u8; 15usize] = b"expansion_time\0";
pub const ZPOOL_CONFIG_REBUILD_STATS: &'static [u8; 26usize] = b"org.openzfs:rebuild_stats\0";
pub const ZPOOL_CONFIG_OFFLINE: &'static [u8; 8usize] = b"offline\0";
pub const ZPOOL_CONFIG_FAULTED: &'static [u8; 8usize] = b"faulted\0";
pub const ZPOOL_CONFIG_DEGRADED: &'static [u8; 9usize] = b"degraded\0";
pub const ZPOOL_CONFIG_REMOVED: &'static [u8; 8usize] = b"removed\0";
pub const ZPOOL_CONFIG_FRU: &'static [u8; 4usize] = b"fru\0";
pub const ZPOOL_CONFIG_AUX_STATE: &'static [u8; 10usize] = b"aux_state\0";
pub const ZPOOL_LOAD_POLICY: &'static [u8; 12usize] = b"load-policy\0";
pub const ZPOOL_LOAD_REWIND_POLICY: &'static [u8; 19usize] = b"load-rewind-policy\0";
pub const ZPOOL_LOAD_REQUEST_TXG: &'static [u8; 17usize] = b"load-request-txg\0";
pub const ZPOOL_LOAD_META_THRESH: &'static [u8; 17usize] = b"load-meta-thresh\0";
pub const ZPOOL_LOAD_DATA_THRESH: &'static [u8; 17usize] = b"load-data-thresh\0";
pub const ZPOOL_CONFIG_LOAD_TIME: &'static [u8; 14usize] = b"rewind_txg_ts\0";
pub const ZPOOL_CONFIG_LOAD_DATA_ERRORS: &'static [u8; 19usize] = b"verify_data_errors\0";
pub const ZPOOL_CONFIG_REWIND_TIME: &'static [u8; 18usize] = b"seconds_of_rewind\0";
pub const ZPOOL_CONFIG_DRAID_NDATA: &'static [u8; 12usize] = b"draid_ndata\0";
pub const ZPOOL_CONFIG_DRAID_NSPARES: &'static [u8; 14usize] = b"draid_nspares\0";
pub const ZPOOL_CONFIG_DRAID_NGROUPS: &'static [u8; 14usize] = b"draid_ngroups\0";
pub const VDEV_TYPE_ROOT: &'static [u8; 5usize] = b"root\0";
pub const VDEV_TYPE_MIRROR: &'static [u8; 7usize] = b"mirror\0";
pub const VDEV_TYPE_REPLACING: &'static [u8; 10usize] = b"replacing\0";
pub const VDEV_TYPE_RAIDZ: &'static [u8; 6usize] = b"raidz\0";
pub const VDEV_TYPE_DRAID: &'static [u8; 6usize] = b"draid\0";
pub const VDEV_TYPE_DRAID_SPARE: &'static [u8; 7usize] = b"dspare\0";
pub const VDEV_TYPE_DISK: &'static [u8; 5usize] = b"disk\0";
pub const VDEV_TYPE_FILE: &'static [u8; 5usize] = b"file\0";
pub const VDEV_TYPE_MISSING: &'static [u8; 8usize] = b"missing\0";
pub const VDEV_TYPE_HOLE: &'static [u8; 5usize] = b"hole\0";
pub const VDEV_TYPE_SPARE: &'static [u8; 6usize] = b"spare\0";
pub const VDEV_TYPE_LOG: &'static [u8; 4usize] = b"log\0";
pub const VDEV_TYPE_L2CACHE: &'static [u8; 8usize] = b"l2cache\0";
pub const VDEV_TYPE_INDIRECT: &'static [u8; 9usize] = b"indirect\0";
pub const VDEV_RAIDZ_MAXPARITY: u32 = 3;
pub const VDEV_DRAID_MAXPARITY: u32 = 3;
pub const VDEV_DRAID_MIN_CHILDREN: u32 = 2;
pub const VDEV_DRAID_MAX_CHILDREN: u32 = 255;
pub const VDEV_TOP_ZAP_INDIRECT_OBSOLETE_SM: &'static [u8; 33usize] =
    b"com.delphix:indirect_obsolete_sm\0";
pub const VDEV_TOP_ZAP_OBSOLETE_COUNTS_ARE_PRECISE: &'static [u8; 40usize] =
    b"com.delphix:obsolete_counts_are_precise\0";
pub const VDEV_TOP_ZAP_POOL_CHECKPOINT_SM: &'static [u8; 31usize] =
    b"com.delphix:pool_checkpoint_sm\0";
pub const VDEV_TOP_ZAP_MS_UNFLUSHED_PHYS_TXGS: &'static [u8; 35usize] =
    b"com.delphix:ms_unflushed_phys_txgs\0";
pub const VDEV_TOP_ZAP_VDEV_REBUILD_PHYS: &'static [u8; 25usize] = b"org.openzfs:vdev_rebuild\0";
pub const VDEV_TOP_ZAP_ALLOCATION_BIAS: &'static [u8; 31usize] =
    b"org.zfsonlinux:allocation_bias\0";
pub const VDEV_ALLOC_BIAS_LOG: &'static [u8; 4usize] = b"log\0";
pub const VDEV_ALLOC_BIAS_SPECIAL: &'static [u8; 8usize] = b"special\0";
pub const VDEV_ALLOC_BIAS_DEDUP: &'static [u8; 6usize] = b"dedup\0";
pub const VDEV_LEAF_ZAP_INITIALIZE_LAST_OFFSET: &'static [u8; 38usize] =
    b"com.delphix:next_offset_to_initialize\0";
pub const VDEV_LEAF_ZAP_INITIALIZE_STATE: &'static [u8; 34usize] =
    b"com.delphix:vdev_initialize_state\0";
pub const VDEV_LEAF_ZAP_INITIALIZE_ACTION_TIME: &'static [u8; 40usize] =
    b"com.delphix:vdev_initialize_action_time\0";
pub const VDEV_LEAF_ZAP_TRIM_LAST_OFFSET: &'static [u8; 35usize] =
    b"org.zfsonlinux:next_offset_to_trim\0";
pub const VDEV_LEAF_ZAP_TRIM_STATE: &'static [u8; 31usize] = b"org.zfsonlinux:vdev_trim_state\0";
pub const VDEV_LEAF_ZAP_TRIM_ACTION_TIME: &'static [u8; 37usize] =
    b"org.zfsonlinux:vdev_trim_action_time\0";
pub const VDEV_LEAF_ZAP_TRIM_RATE: &'static [u8; 30usize] = b"org.zfsonlinux:vdev_trim_rate\0";
pub const VDEV_LEAF_ZAP_TRIM_PARTIAL: &'static [u8; 33usize] =
    b"org.zfsonlinux:vdev_trim_partial\0";
pub const VDEV_LEAF_ZAP_TRIM_SECURE: &'static [u8; 32usize] = b"org.zfsonlinux:vdev_trim_secure\0";
pub const ZPOOL_CACHE_BOOT: &'static [u8; 22usize] = b"/boot/zfs/zpool.cache\0";
pub const ZPOOL_CACHE: &'static [u8; 21usize] = b"/etc/zfs/zpool.cache\0";
pub const VDEV_L_HISTO_BUCKETS: u32 = 37;
pub const VDEV_RQ_HISTO_BUCKETS: u32 = 25;
pub const ZPOOL_ERR_LIST: &'static [u8; 11usize] = b"error list\0";
pub const ZPOOL_ERR_DATASET: &'static [u8; 8usize] = b"dataset\0";
pub const ZPOOL_ERR_OBJECT: &'static [u8; 7usize] = b"object\0";
pub const ZPOOL_HIST_RECORD: &'static [u8; 15usize] = b"history record\0";
pub const ZPOOL_HIST_TIME: &'static [u8; 13usize] = b"history time\0";
pub const ZPOOL_HIST_CMD: &'static [u8; 16usize] = b"history command\0";
pub const ZPOOL_HIST_WHO: &'static [u8; 12usize] = b"history who\0";
pub const ZPOOL_HIST_ZONE: &'static [u8; 13usize] = b"history zone\0";
pub const ZPOOL_HIST_HOST: &'static [u8; 17usize] = b"history hostname\0";
pub const ZPOOL_HIST_TXG: &'static [u8; 12usize] = b"history txg\0";
pub const ZPOOL_HIST_INT_EVENT: &'static [u8; 23usize] = b"history internal event\0";
pub const ZPOOL_HIST_INT_STR: &'static [u8; 21usize] = b"history internal str\0";
pub const ZPOOL_HIST_INT_NAME: &'static [u8; 14usize] = b"internal_name\0";
pub const ZPOOL_HIST_IOCTL: &'static [u8; 6usize] = b"ioctl\0";
pub const ZPOOL_HIST_INPUT_NVL: &'static [u8; 7usize] = b"in_nvl\0";
pub const ZPOOL_HIST_OUTPUT_NVL: &'static [u8; 8usize] = b"out_nvl\0";
pub const ZPOOL_HIST_OUTPUT_SIZE: &'static [u8; 9usize] = b"out_size\0";
pub const ZPOOL_HIST_DSNAME: &'static [u8; 7usize] = b"dsname\0";
pub const ZPOOL_HIST_DSID: &'static [u8; 5usize] = b"dsid\0";
pub const ZPOOL_HIST_ERRNO: &'static [u8; 6usize] = b"errno\0";
pub const ZPOOL_HIDDEN_ARGS: &'static [u8; 12usize] = b"hidden_args\0";
pub const ZPOOL_INITIALIZE_COMMAND: &'static [u8; 19usize] = b"initialize_command\0";
pub const ZPOOL_INITIALIZE_VDEVS: &'static [u8; 17usize] = b"initialize_vdevs\0";
pub const ZPOOL_TRIM_COMMAND: &'static [u8; 13usize] = b"trim_command\0";
pub const ZPOOL_TRIM_VDEVS: &'static [u8; 11usize] = b"trim_vdevs\0";
pub const ZPOOL_TRIM_RATE: &'static [u8; 10usize] = b"trim_rate\0";
pub const ZPOOL_TRIM_SECURE: &'static [u8; 12usize] = b"trim_secure\0";
pub const ZPOOL_WAIT_ACTIVITY: &'static [u8; 14usize] = b"wait_activity\0";
pub const ZPOOL_WAIT_TAG: &'static [u8; 9usize] = b"wait_tag\0";
pub const ZPOOL_WAIT_WAITED: &'static [u8; 12usize] = b"wait_waited\0";
pub type uint_t = ::std::os::raw::c_uint;
pub mod boolean_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const B_FALSE: Type = 0;
    pub const B_TRUE: Type = 1;
}
pub type uchar_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvlist {
    pub nvl_version: i32,
    pub nvl_nvflag: u32,
    pub nvl_priv: u64,
    pub nvl_flag: u32,
    pub nvl_pad: i32,
}
#[test]
fn bindgen_test_layout_nvlist() {
    assert_eq!(
        ::std::mem::size_of::<nvlist>(),
        24usize,
        concat!("Size of: ", stringify!(nvlist))
    );
    assert_eq!(
        ::std::mem::align_of::<nvlist>(),
        8usize,
        concat!("Alignment of ", stringify!(nvlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvlist>())).nvl_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvlist),
            "::",
            stringify!(nvl_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvlist>())).nvl_nvflag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvlist),
            "::",
            stringify!(nvl_nvflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvlist>())).nvl_priv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvlist),
            "::",
            stringify!(nvl_priv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvlist>())).nvl_flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nvlist),
            "::",
            stringify!(nvl_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvlist>())).nvl_pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nvlist),
            "::",
            stringify!(nvl_pad)
        )
    );
}
pub type nvlist_t = nvlist;
pub mod zfs_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_TYPE_FILESYSTEM: Type = 1;
    pub const ZFS_TYPE_SNAPSHOT: Type = 2;
    pub const ZFS_TYPE_VOLUME: Type = 4;
    pub const ZFS_TYPE_POOL: Type = 8;
    pub const ZFS_TYPE_BOOKMARK: Type = 16;
}
pub mod zfs_prop_t {
    pub type Type = ::std::os::raw::c_int;
    pub const ZPROP_CONT: Type = -2;
    pub const ZPROP_INVAL: Type = -1;
    pub const ZFS_PROP_TYPE: Type = 0;
    pub const ZFS_PROP_CREATION: Type = 1;
    pub const ZFS_PROP_USED: Type = 2;
    pub const ZFS_PROP_AVAILABLE: Type = 3;
    pub const ZFS_PROP_REFERENCED: Type = 4;
    pub const ZFS_PROP_COMPRESSRATIO: Type = 5;
    pub const ZFS_PROP_MOUNTED: Type = 6;
    pub const ZFS_PROP_ORIGIN: Type = 7;
    pub const ZFS_PROP_QUOTA: Type = 8;
    pub const ZFS_PROP_RESERVATION: Type = 9;
    pub const ZFS_PROP_VOLSIZE: Type = 10;
    pub const ZFS_PROP_VOLBLOCKSIZE: Type = 11;
    pub const ZFS_PROP_RECORDSIZE: Type = 12;
    pub const ZFS_PROP_MOUNTPOINT: Type = 13;
    pub const ZFS_PROP_SHARENFS: Type = 14;
    pub const ZFS_PROP_CHECKSUM: Type = 15;
    pub const ZFS_PROP_COMPRESSION: Type = 16;
    pub const ZFS_PROP_ATIME: Type = 17;
    pub const ZFS_PROP_DEVICES: Type = 18;
    pub const ZFS_PROP_EXEC: Type = 19;
    pub const ZFS_PROP_SETUID: Type = 20;
    pub const ZFS_PROP_READONLY: Type = 21;
    pub const ZFS_PROP_ZONED: Type = 22;
    pub const ZFS_PROP_SNAPDIR: Type = 23;
    pub const ZFS_PROP_ACLMODE: Type = 24;
    pub const ZFS_PROP_ACLINHERIT: Type = 25;
    pub const ZFS_PROP_CREATETXG: Type = 26;
    pub const ZFS_PROP_NAME: Type = 27;
    pub const ZFS_PROP_CANMOUNT: Type = 28;
    pub const ZFS_PROP_ISCSIOPTIONS: Type = 29;
    pub const ZFS_PROP_XATTR: Type = 30;
    pub const ZFS_PROP_NUMCLONES: Type = 31;
    pub const ZFS_PROP_COPIES: Type = 32;
    pub const ZFS_PROP_VERSION: Type = 33;
    pub const ZFS_PROP_UTF8ONLY: Type = 34;
    pub const ZFS_PROP_NORMALIZE: Type = 35;
    pub const ZFS_PROP_CASE: Type = 36;
    pub const ZFS_PROP_VSCAN: Type = 37;
    pub const ZFS_PROP_NBMAND: Type = 38;
    pub const ZFS_PROP_SHARESMB: Type = 39;
    pub const ZFS_PROP_REFQUOTA: Type = 40;
    pub const ZFS_PROP_REFRESERVATION: Type = 41;
    pub const ZFS_PROP_GUID: Type = 42;
    pub const ZFS_PROP_PRIMARYCACHE: Type = 43;
    pub const ZFS_PROP_SECONDARYCACHE: Type = 44;
    pub const ZFS_PROP_USEDSNAP: Type = 45;
    pub const ZFS_PROP_USEDDS: Type = 46;
    pub const ZFS_PROP_USEDCHILD: Type = 47;
    pub const ZFS_PROP_USEDREFRESERV: Type = 48;
    pub const ZFS_PROP_USERACCOUNTING: Type = 49;
    pub const ZFS_PROP_STMF_SHAREINFO: Type = 50;
    pub const ZFS_PROP_DEFER_DESTROY: Type = 51;
    pub const ZFS_PROP_USERREFS: Type = 52;
    pub const ZFS_PROP_LOGBIAS: Type = 53;
    pub const ZFS_PROP_UNIQUE: Type = 54;
    pub const ZFS_PROP_OBJSETID: Type = 55;
    pub const ZFS_PROP_DEDUP: Type = 56;
    pub const ZFS_PROP_MLSLABEL: Type = 57;
    pub const ZFS_PROP_SYNC: Type = 58;
    pub const ZFS_PROP_DNODESIZE: Type = 59;
    pub const ZFS_PROP_REFRATIO: Type = 60;
    pub const ZFS_PROP_WRITTEN: Type = 61;
    pub const ZFS_PROP_CLONES: Type = 62;
    pub const ZFS_PROP_LOGICALUSED: Type = 63;
    pub const ZFS_PROP_LOGICALREFERENCED: Type = 64;
    pub const ZFS_PROP_INCONSISTENT: Type = 65;
    pub const ZFS_PROP_VOLMODE: Type = 66;
    pub const ZFS_PROP_FILESYSTEM_LIMIT: Type = 67;
    pub const ZFS_PROP_SNAPSHOT_LIMIT: Type = 68;
    pub const ZFS_PROP_FILESYSTEM_COUNT: Type = 69;
    pub const ZFS_PROP_SNAPSHOT_COUNT: Type = 70;
    pub const ZFS_PROP_SNAPDEV: Type = 71;
    pub const ZFS_PROP_ACLTYPE: Type = 72;
    pub const ZFS_PROP_SELINUX_CONTEXT: Type = 73;
    pub const ZFS_PROP_SELINUX_FSCONTEXT: Type = 74;
    pub const ZFS_PROP_SELINUX_DEFCONTEXT: Type = 75;
    pub const ZFS_PROP_SELINUX_ROOTCONTEXT: Type = 76;
    pub const ZFS_PROP_RELATIME: Type = 77;
    pub const ZFS_PROP_REDUNDANT_METADATA: Type = 78;
    pub const ZFS_PROP_OVERLAY: Type = 79;
    pub const ZFS_PROP_PREV_SNAP: Type = 80;
    pub const ZFS_PROP_RECEIVE_RESUME_TOKEN: Type = 81;
    pub const ZFS_PROP_ENCRYPTION: Type = 82;
    pub const ZFS_PROP_KEYLOCATION: Type = 83;
    pub const ZFS_PROP_KEYFORMAT: Type = 84;
    pub const ZFS_PROP_PBKDF2_SALT: Type = 85;
    pub const ZFS_PROP_PBKDF2_ITERS: Type = 86;
    pub const ZFS_PROP_ENCRYPTION_ROOT: Type = 87;
    pub const ZFS_PROP_KEY_GUID: Type = 88;
    pub const ZFS_PROP_KEYSTATUS: Type = 89;
    pub const ZFS_PROP_REMAPTXG: Type = 90;
    pub const ZFS_PROP_SPECIAL_SMALL_BLOCKS: Type = 91;
    pub const ZFS_PROP_IVSET_GUID: Type = 92;
    pub const ZFS_PROP_REDACTED: Type = 93;
    pub const ZFS_PROP_REDACT_SNAPS: Type = 94;
    pub const ZFS_NUM_PROPS: Type = 95;
}
pub mod zfs_userquota_prop_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_PROP_USERUSED: Type = 0;
    pub const ZFS_PROP_USERQUOTA: Type = 1;
    pub const ZFS_PROP_GROUPUSED: Type = 2;
    pub const ZFS_PROP_GROUPQUOTA: Type = 3;
    pub const ZFS_PROP_USEROBJUSED: Type = 4;
    pub const ZFS_PROP_USEROBJQUOTA: Type = 5;
    pub const ZFS_PROP_GROUPOBJUSED: Type = 6;
    pub const ZFS_PROP_GROUPOBJQUOTA: Type = 7;
    pub const ZFS_PROP_PROJECTUSED: Type = 8;
    pub const ZFS_PROP_PROJECTQUOTA: Type = 9;
    pub const ZFS_PROP_PROJECTOBJUSED: Type = 10;
    pub const ZFS_PROP_PROJECTOBJQUOTA: Type = 11;
    pub const ZFS_NUM_USERQUOTA_PROPS: Type = 12;
}
pub mod zfs_deleg_who_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_DELEG_WHO_UNKNOWN: Type = 0;
    pub const ZFS_DELEG_USER: Type = 117;
    pub const ZFS_DELEG_USER_SETS: Type = 85;
    pub const ZFS_DELEG_GROUP: Type = 103;
    pub const ZFS_DELEG_GROUP_SETS: Type = 71;
    pub const ZFS_DELEG_EVERYONE: Type = 101;
    pub const ZFS_DELEG_EVERYONE_SETS: Type = 69;
    pub const ZFS_DELEG_CREATE: Type = 99;
    pub const ZFS_DELEG_CREATE_SETS: Type = 67;
    pub const ZFS_DELEG_NAMED_SET: Type = 115;
    pub const ZFS_DELEG_NAMED_SET_SETS: Type = 83;
}
pub mod zfs_deleg_inherit_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_DELEG_NONE: Type = 0;
    pub const ZFS_DELEG_PERM_LOCAL: Type = 1;
    pub const ZFS_DELEG_PERM_DESCENDENT: Type = 2;
    pub const ZFS_DELEG_PERM_LOCALDESCENDENT: Type = 3;
    pub const ZFS_DELEG_PERM_CREATE: Type = 4;
}
pub mod zfs_canmount_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_CANMOUNT_OFF: Type = 0;
    pub const ZFS_CANMOUNT_ON: Type = 1;
    pub const ZFS_CANMOUNT_NOAUTO: Type = 2;
}
pub mod zfs_logbias_op_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_LOGBIAS_LATENCY: Type = 0;
    pub const ZFS_LOGBIAS_THROUGHPUT: Type = 1;
}
pub mod zfs_share_op {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_SHARE_NFS: Type = 0;
    pub const ZFS_UNSHARE_NFS: Type = 1;
    pub const ZFS_SHARE_SMB: Type = 2;
    pub const ZFS_UNSHARE_SMB: Type = 3;
}
pub use self::zfs_share_op::Type as zfs_share_op_t;
pub mod zfs_smb_acl_op {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_SMB_ACL_ADD: Type = 0;
    pub const ZFS_SMB_ACL_REMOVE: Type = 1;
    pub const ZFS_SMB_ACL_RENAME: Type = 2;
    pub const ZFS_SMB_ACL_PURGE: Type = 3;
}
pub use self::zfs_smb_acl_op::Type as zfs_smb_acl_op_t;
pub mod zfs_cache_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_CACHE_NONE: Type = 0;
    pub const ZFS_CACHE_METADATA: Type = 1;
    pub const ZFS_CACHE_ALL: Type = 2;
}
pub use self::zfs_cache_type::Type as zfs_cache_type_t;
pub mod zfs_sync_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_SYNC_STANDARD: Type = 0;
    pub const ZFS_SYNC_ALWAYS: Type = 1;
    pub const ZFS_SYNC_DISABLED: Type = 2;
}
pub mod zfs_xattr_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_XATTR_OFF: Type = 0;
    pub const ZFS_XATTR_DIR: Type = 1;
    pub const ZFS_XATTR_SA: Type = 2;
}
pub mod zfs_dnsize_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_DNSIZE_LEGACY: Type = 0;
    pub const ZFS_DNSIZE_AUTO: Type = 1;
    pub const ZFS_DNSIZE_1K: Type = 1024;
    pub const ZFS_DNSIZE_2K: Type = 2048;
    pub const ZFS_DNSIZE_4K: Type = 4096;
    pub const ZFS_DNSIZE_8K: Type = 8192;
    pub const ZFS_DNSIZE_16K: Type = 16384;
}
pub mod zfs_redundant_metadata_type_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_REDUNDANT_METADATA_ALL: Type = 0;
    pub const ZFS_REDUNDANT_METADATA_MOST: Type = 1;
}
pub mod zfs_volmode_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_VOLMODE_DEFAULT: Type = 0;
    pub const ZFS_VOLMODE_GEOM: Type = 1;
    pub const ZFS_VOLMODE_DEV: Type = 2;
    pub const ZFS_VOLMODE_NONE: Type = 3;
}
pub mod zfs_keystatus {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_KEYSTATUS_NONE: Type = 0;
    pub const ZFS_KEYSTATUS_UNAVAILABLE: Type = 1;
    pub const ZFS_KEYSTATUS_AVAILABLE: Type = 2;
}
pub use self::zfs_keystatus::Type as zfs_keystatus_t;
pub mod zfs_keyformat {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_KEYFORMAT_NONE: Type = 0;
    pub const ZFS_KEYFORMAT_RAW: Type = 1;
    pub const ZFS_KEYFORMAT_HEX: Type = 2;
    pub const ZFS_KEYFORMAT_PASSPHRASE: Type = 3;
    pub const ZFS_KEYFORMAT_FORMATS: Type = 4;
}
pub use self::zfs_keyformat::Type as zfs_keyformat_t;
pub mod zfs_key_location {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_KEYLOCATION_NONE: Type = 0;
    pub const ZFS_KEYLOCATION_PROMPT: Type = 1;
    pub const ZFS_KEYLOCATION_URI: Type = 2;
    pub const ZFS_KEYLOCATION_LOCATIONS: Type = 3;
}
pub use self::zfs_key_location::Type as zfs_keylocation_t;
pub mod pool_initialize_func {
    pub type Type = ::std::os::raw::c_uint;
    pub const POOL_INITIALIZE_START: Type = 0;
    pub const POOL_INITIALIZE_CANCEL: Type = 1;
    pub const POOL_INITIALIZE_SUSPEND: Type = 2;
    pub const POOL_INITIALIZE_FUNCS: Type = 3;
}
pub use self::pool_initialize_func::Type as pool_initialize_func_t;
pub mod pool_trim_func {
    pub type Type = ::std::os::raw::c_uint;
    pub const POOL_TRIM_START: Type = 0;
    pub const POOL_TRIM_CANCEL: Type = 1;
    pub const POOL_TRIM_SUSPEND: Type = 2;
    pub const POOL_TRIM_FUNCS: Type = 3;
}
pub use self::pool_trim_func::Type as pool_trim_func_t;
pub mod zfs_ioc {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_IOC_FIRST: Type = 23040;
    pub const ZFS_IOC: Type = 23040;
    pub const ZFS_IOC_POOL_CREATE: Type = 23040;
    pub const ZFS_IOC_POOL_DESTROY: Type = 23041;
    pub const ZFS_IOC_POOL_IMPORT: Type = 23042;
    pub const ZFS_IOC_POOL_EXPORT: Type = 23043;
    pub const ZFS_IOC_POOL_CONFIGS: Type = 23044;
    pub const ZFS_IOC_POOL_STATS: Type = 23045;
    pub const ZFS_IOC_POOL_TRYIMPORT: Type = 23046;
    pub const ZFS_IOC_POOL_SCAN: Type = 23047;
    pub const ZFS_IOC_POOL_FREEZE: Type = 23048;
    pub const ZFS_IOC_POOL_UPGRADE: Type = 23049;
    pub const ZFS_IOC_POOL_GET_HISTORY: Type = 23050;
    pub const ZFS_IOC_VDEV_ADD: Type = 23051;
    pub const ZFS_IOC_VDEV_REMOVE: Type = 23052;
    pub const ZFS_IOC_VDEV_SET_STATE: Type = 23053;
    pub const ZFS_IOC_VDEV_ATTACH: Type = 23054;
    pub const ZFS_IOC_VDEV_DETACH: Type = 23055;
    pub const ZFS_IOC_VDEV_SETPATH: Type = 23056;
    pub const ZFS_IOC_VDEV_SETFRU: Type = 23057;
    pub const ZFS_IOC_OBJSET_STATS: Type = 23058;
    pub const ZFS_IOC_OBJSET_ZPLPROPS: Type = 23059;
    pub const ZFS_IOC_DATASET_LIST_NEXT: Type = 23060;
    pub const ZFS_IOC_SNAPSHOT_LIST_NEXT: Type = 23061;
    pub const ZFS_IOC_SET_PROP: Type = 23062;
    pub const ZFS_IOC_CREATE: Type = 23063;
    pub const ZFS_IOC_DESTROY: Type = 23064;
    pub const ZFS_IOC_ROLLBACK: Type = 23065;
    pub const ZFS_IOC_RENAME: Type = 23066;
    pub const ZFS_IOC_RECV: Type = 23067;
    pub const ZFS_IOC_SEND: Type = 23068;
    pub const ZFS_IOC_INJECT_FAULT: Type = 23069;
    pub const ZFS_IOC_CLEAR_FAULT: Type = 23070;
    pub const ZFS_IOC_INJECT_LIST_NEXT: Type = 23071;
    pub const ZFS_IOC_ERROR_LOG: Type = 23072;
    pub const ZFS_IOC_CLEAR: Type = 23073;
    pub const ZFS_IOC_PROMOTE: Type = 23074;
    pub const ZFS_IOC_SNAPSHOT: Type = 23075;
    pub const ZFS_IOC_DSOBJ_TO_DSNAME: Type = 23076;
    pub const ZFS_IOC_OBJ_TO_PATH: Type = 23077;
    pub const ZFS_IOC_POOL_SET_PROPS: Type = 23078;
    pub const ZFS_IOC_POOL_GET_PROPS: Type = 23079;
    pub const ZFS_IOC_SET_FSACL: Type = 23080;
    pub const ZFS_IOC_GET_FSACL: Type = 23081;
    pub const ZFS_IOC_SHARE: Type = 23082;
    pub const ZFS_IOC_INHERIT_PROP: Type = 23083;
    pub const ZFS_IOC_SMB_ACL: Type = 23084;
    pub const ZFS_IOC_USERSPACE_ONE: Type = 23085;
    pub const ZFS_IOC_USERSPACE_MANY: Type = 23086;
    pub const ZFS_IOC_USERSPACE_UPGRADE: Type = 23087;
    pub const ZFS_IOC_HOLD: Type = 23088;
    pub const ZFS_IOC_RELEASE: Type = 23089;
    pub const ZFS_IOC_GET_HOLDS: Type = 23090;
    pub const ZFS_IOC_OBJSET_RECVD_PROPS: Type = 23091;
    pub const ZFS_IOC_VDEV_SPLIT: Type = 23092;
    pub const ZFS_IOC_NEXT_OBJ: Type = 23093;
    pub const ZFS_IOC_DIFF: Type = 23094;
    pub const ZFS_IOC_TMP_SNAPSHOT: Type = 23095;
    pub const ZFS_IOC_OBJ_TO_STATS: Type = 23096;
    pub const ZFS_IOC_SPACE_WRITTEN: Type = 23097;
    pub const ZFS_IOC_SPACE_SNAPS: Type = 23098;
    pub const ZFS_IOC_DESTROY_SNAPS: Type = 23099;
    pub const ZFS_IOC_POOL_REGUID: Type = 23100;
    pub const ZFS_IOC_POOL_REOPEN: Type = 23101;
    pub const ZFS_IOC_SEND_PROGRESS: Type = 23102;
    pub const ZFS_IOC_LOG_HISTORY: Type = 23103;
    pub const ZFS_IOC_SEND_NEW: Type = 23104;
    pub const ZFS_IOC_SEND_SPACE: Type = 23105;
    pub const ZFS_IOC_CLONE: Type = 23106;
    pub const ZFS_IOC_BOOKMARK: Type = 23107;
    pub const ZFS_IOC_GET_BOOKMARKS: Type = 23108;
    pub const ZFS_IOC_DESTROY_BOOKMARKS: Type = 23109;
    pub const ZFS_IOC_RECV_NEW: Type = 23110;
    pub const ZFS_IOC_POOL_SYNC: Type = 23111;
    pub const ZFS_IOC_CHANNEL_PROGRAM: Type = 23112;
    pub const ZFS_IOC_LOAD_KEY: Type = 23113;
    pub const ZFS_IOC_UNLOAD_KEY: Type = 23114;
    pub const ZFS_IOC_CHANGE_KEY: Type = 23115;
    pub const ZFS_IOC_REMAP: Type = 23116;
    pub const ZFS_IOC_POOL_CHECKPOINT: Type = 23117;
    pub const ZFS_IOC_POOL_DISCARD_CHECKPOINT: Type = 23118;
    pub const ZFS_IOC_POOL_INITIALIZE: Type = 23119;
    pub const ZFS_IOC_POOL_TRIM: Type = 23120;
    pub const ZFS_IOC_REDACT: Type = 23121;
    pub const ZFS_IOC_GET_BOOKMARK_PROPS: Type = 23122;
    pub const ZFS_IOC_WAIT: Type = 23123;
    pub const ZFS_IOC_WAIT_FS: Type = 23124;
    pub const ZFS_IOC_PLATFORM: Type = 23168;
    pub const ZFS_IOC_EVENTS_NEXT: Type = 23169;
    pub const ZFS_IOC_EVENTS_CLEAR: Type = 23170;
    pub const ZFS_IOC_EVENTS_SEEK: Type = 23171;
    pub const ZFS_IOC_NEXTBOOT: Type = 23172;
    pub const ZFS_IOC_JAIL: Type = 23173;
    pub const ZFS_IOC_UNJAIL: Type = 23174;
    pub const ZFS_IOC_SET_BOOTENV: Type = 23175;
    pub const ZFS_IOC_GET_BOOTENV: Type = 23176;
    pub const ZFS_IOC_LAST: Type = 23177;
}
pub use self::zfs_ioc::Type as zfs_ioc_t;
pub mod zfs_errno_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_ERR_CHECKPOINT_EXISTS: Type = 1024;
    pub const ZFS_ERR_DISCARDING_CHECKPOINT: Type = 1025;
    pub const ZFS_ERR_NO_CHECKPOINT: Type = 1026;
    pub const ZFS_ERR_DEVRM_IN_PROGRESS: Type = 1027;
    pub const ZFS_ERR_VDEV_TOO_BIG: Type = 1028;
    pub const ZFS_ERR_IOC_CMD_UNAVAIL: Type = 1029;
    pub const ZFS_ERR_IOC_ARG_UNAVAIL: Type = 1030;
    pub const ZFS_ERR_IOC_ARG_REQUIRED: Type = 1031;
    pub const ZFS_ERR_IOC_ARG_BADTYPE: Type = 1032;
    pub const ZFS_ERR_WRONG_PARENT: Type = 1033;
    pub const ZFS_ERR_FROM_IVSET_GUID_MISSING: Type = 1034;
    pub const ZFS_ERR_FROM_IVSET_GUID_MISMATCH: Type = 1035;
    pub const ZFS_ERR_SPILL_BLOCK_FLAG_MISSING: Type = 1036;
    pub const ZFS_ERR_UNKNOWN_SEND_STREAM_FEATURE: Type = 1037;
    pub const ZFS_ERR_EXPORT_IN_PROGRESS: Type = 1038;
    pub const ZFS_ERR_BOOKMARK_SOURCE_NOT_ANCESTOR: Type = 1039;
    pub const ZFS_ERR_STREAM_TRUNCATED: Type = 1040;
    pub const ZFS_ERR_STREAM_LARGE_BLOCK_MISMATCH: Type = 1041;
    pub const ZFS_ERR_RESILVER_IN_PROGRESS: Type = 1042;
    pub const ZFS_ERR_REBUILD_IN_PROGRESS: Type = 1043;
    pub const ZFS_ERR_BADPROP: Type = 1044;
}
pub mod zpool_wait_activity_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZPOOL_WAIT_CKPT_DISCARD: Type = 0;
    pub const ZPOOL_WAIT_FREE: Type = 1;
    pub const ZPOOL_WAIT_INITIALIZE: Type = 2;
    pub const ZPOOL_WAIT_REPLACE: Type = 3;
    pub const ZPOOL_WAIT_REMOVE: Type = 4;
    pub const ZPOOL_WAIT_RESILVER: Type = 5;
    pub const ZPOOL_WAIT_SCRUB: Type = 6;
    pub const ZPOOL_WAIT_TRIM: Type = 7;
    pub const ZPOOL_WAIT_NUM_ACTIVITIES: Type = 8;
}
pub mod zfs_wait_activity_t {
    pub type Type = ::std::os::raw::c_uint;
    pub const ZFS_WAIT_DELETEQ: Type = 0;
    pub const ZFS_WAIT_NUM_ACTIVITIES: Type = 1;
}
extern "C" {
    pub fn libzfs_core_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libzfs_core_fini();
}
pub mod lzc_dataset_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const LZC_DATSET_TYPE_ZFS: Type = 2;
    pub const LZC_DATSET_TYPE_ZVOL: Type = 3;
}
extern "C" {
    pub fn lzc_snapshot(
        arg1: *mut nvlist_t,
        arg2: *mut nvlist_t,
        arg3: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: lzc_dataset_type::Type,
        arg3: *mut nvlist_t,
        arg4: *mut u8,
        arg5: uint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_clone(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_promote(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_destroy_snaps(
        arg1: *mut nvlist_t,
        arg2: boolean_t::Type,
        arg3: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_bookmark(arg1: *mut nvlist_t, arg2: *mut *mut nvlist_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_get_bookmarks(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_get_bookmark_props(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_destroy_bookmarks(
        arg1: *mut nvlist_t,
        arg2: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_load_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean_t::Type,
        arg3: *mut u8,
        arg4: uint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_unload_key(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_change_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: u64,
        arg3: *mut nvlist_t,
        arg4: *mut u8,
        arg5: uint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_initialize(
        arg1: *const ::std::os::raw::c_char,
        arg2: pool_initialize_func_t,
        arg3: *mut nvlist_t,
        arg4: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_trim(
        arg1: *const ::std::os::raw::c_char,
        arg2: pool_trim_func_t,
        arg3: u64,
        arg4: boolean_t::Type,
        arg5: *mut nvlist_t,
        arg6: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_redact(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_snaprange_space(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_hold(
        arg1: *mut nvlist_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_release(arg1: *mut nvlist_t, arg2: *mut *mut nvlist_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_get_holds(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
pub mod lzc_send_flags {
    pub type Type = ::std::os::raw::c_uint;
    pub const LZC_SEND_FLAG_EMBED_DATA: Type = 1;
    pub const LZC_SEND_FLAG_LARGE_BLOCK: Type = 2;
    pub const LZC_SEND_FLAG_COMPRESS: Type = 4;
    pub const LZC_SEND_FLAG_RAW: Type = 8;
    pub const LZC_SEND_FLAG_SAVED: Type = 16;
}
extern "C" {
    pub fn lzc_send(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: lzc_send_flags::Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_send_resume(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: lzc_send_flags::Type,
        arg5: u64,
        arg6: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_send_space(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: lzc_send_flags::Type,
        arg4: *mut u64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmu_replay_record {
    _unused: [u8; 0],
}
extern "C" {
    pub fn lzc_send_redacted(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: lzc_send_flags::Type,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_send_resume_redacted(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: lzc_send_flags::Type,
        arg5: u64,
        arg6: u64,
        arg7: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_receive(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean_t::Type,
        arg5: boolean_t::Type,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_receive_resumable(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean_t::Type,
        arg5: boolean_t::Type,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_receive_with_header(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean_t::Type,
        arg5: boolean_t::Type,
        arg6: boolean_t::Type,
        arg7: ::std::os::raw::c_int,
        arg8: *const dmu_replay_record,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_receive_one(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean_t::Type,
        arg5: boolean_t::Type,
        arg6: boolean_t::Type,
        arg7: ::std::os::raw::c_int,
        arg8: *const dmu_replay_record,
        arg9: ::std::os::raw::c_int,
        arg10: *mut u64,
        arg11: *mut u64,
        arg12: *mut u64,
        arg13: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_receive_with_cmdprops(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *mut nvlist_t,
        arg4: *mut u8,
        arg5: uint_t,
        arg6: *const ::std::os::raw::c_char,
        arg7: boolean_t::Type,
        arg8: boolean_t::Type,
        arg9: boolean_t::Type,
        arg10: ::std::os::raw::c_int,
        arg11: *const dmu_replay_record,
        arg12: ::std::os::raw::c_int,
        arg13: *mut u64,
        arg14: *mut u64,
        arg15: *mut u64,
        arg16: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_send_space_resume_redacted(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: lzc_send_flags::Type,
        arg4: u64,
        arg5: u64,
        arg6: u64,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
        arg9: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_send_progress(arg1: ::std::os::raw::c_int) -> u64;
}
extern "C" {
    pub fn lzc_exists(arg1: *const ::std::os::raw::c_char) -> boolean_t::Type;
}
extern "C" {
    pub fn lzc_rollback(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_rollback_to(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_rename(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_destroy(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_channel_program(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
        arg4: u64,
        arg5: *mut nvlist_t,
        arg6: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_channel_program_nosync(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
        arg4: u64,
        arg5: *mut nvlist_t,
        arg6: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_sync(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut nvlist_t,
        arg3: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_reopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean_t::Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_pool_checkpoint(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_pool_checkpoint_discard(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_wait(
        arg1: *const ::std::os::raw::c_char,
        arg2: zpool_wait_activity_t::Type,
        arg3: *mut boolean_t::Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_wait_tag(
        arg1: *const ::std::os::raw::c_char,
        arg2: zpool_wait_activity_t::Type,
        arg3: u64,
        arg4: *mut boolean_t::Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_wait_fs(
        arg1: *const ::std::os::raw::c_char,
        arg2: zfs_wait_activity_t::Type,
        arg3: *mut boolean_t::Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_set_bootenv(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const nvlist_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lzc_get_bootenv(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut nvlist_t,
    ) -> ::std::os::raw::c_int;
}
